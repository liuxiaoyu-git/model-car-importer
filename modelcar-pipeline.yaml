apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: modelcar-pipeline
spec:
  params:
    - name: HUGGINGFACE_MODEL
      type: string
      description: "The Hugging Face model repository (e.g., ibm-granite/granite-3.2-2b-instruct)"
    - name: OCI_IMAGE
      type: string
      description: "The OCI image destination (e.g., quay.io/my-user/my-modelcar)"
    - name: HUGGINGFACE_ALLOW_PATTERNS
      type: string
      description: 'Optional array of file patterns to allow default: "*.safetensors", "*.json", "*.txt"'
      default: ""
    - name: COMPRESS_MODEL
      type: string
      description: "Whether to compress the model using llmcompressor (true/false)"
      default: "false"
    - name: MODEL_NAME
      type: string
      description: "Name of the model to register in the model registry"
    - name: MODEL_VERSION
      type: string
      description: "Version of the model to register"
      default: "1.0.0"
    - name: SKIP_TASKS
      type: string
      description: "Comma-separated list of tasks to skip (e.g., 'cleanup-workspace,pull-model-from-huggingface,compress-model,build-and-push-modelcar')"
      default: ""
    - name: MODEL_REGISTRY_URL
      type: string
      description: "URL of the model registry service"
  workspaces:
    - name: shared-workspace
    - name: quay-auth-workspace
  tasks:
    - name: cleanup-workspace
      taskSpec:
        workspaces:
          - name: shared-workspace
        params:
          - name: SKIP_TASK
          - name: SKIP_TASKS
        steps:
          - name: cleanup
            image: quay.io/fedora/fedora:latest
            script: |
              #!/bin/sh
              set -e
              if [[ ",$(params.SKIP_TASKS)," == *",$(params.SKIP_TASK),"* ]]; then
                echo "Skipping cleanup-workspace task"
                exit 0
              fi
              echo "Cleaning up workspace..."
              rm -rf /workspace/shared-workspace/*
              echo "Workspace cleanup complete!"
      params:
        - name: SKIP_TASK
          value: "cleanup-workspace"
        - name: SKIP_TASKS
          value: $(params.SKIP_TASKS)
      workspaces:
        - name: shared-workspace
          workspace: shared-workspace
    - name: pull-model-from-huggingface
      taskSpec:
        workspaces:
          - name: shared-workspace
        params:
          - name: HUGGINGFACE_MODEL
          - name: HUGGINGFACE_ALLOW_PATTERNS
            type: string
            default: ""
          - name: SKIP_TASK
          - name: SKIP_TASKS
        steps:
          - name: download-model
            image: quay.io/hayesphilip/huggingface-modelcar-builder:latest
            env:
              - name: HUGGINGFACE_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: huggingface-secret
                    key: HUGGINGFACE_TOKEN
                    optional: true
            script: |
              #!/bin/sh
              set -e
              if [[ ",$(params.SKIP_TASKS)," == *",$(params.SKIP_TASK),"* ]]; then
                echo "Skipping pull-model-from-huggingface task"
                exit 0
              fi
              echo "Downloading model from Hugging Face..."
              mkdir -p /workspace/shared-workspace/model
              CMD="python download_model.py -m $(params.HUGGINGFACE_MODEL) -t /workspace/shared-workspace/model --token $HUGGINGFACE_TOKEN"
              if [ ! -z "$(params.HUGGINGFACE_ALLOW_PATTERNS)" ]; then
                CMD="$CMD --allow-patterns $(params.HUGGINGFACE_ALLOW_PATTERNS)"
              fi
              eval $CMD
              echo "Download complete!"
              if [ -d /workspace/shared-workspace/model/.cache ]; then
                echo "Removing cache"
                rm -r /workspace/shared-workspace/model/.cache
              fi
      params:
        - name: HUGGINGFACE_MODEL
          value: $(params.HUGGINGFACE_MODEL)
        - name: SKIP_TASK
          value: "pull-model-from-huggingface"
        - name: SKIP_TASKS
          value: $(params.SKIP_TASKS)
      workspaces:
        - name: shared-workspace
          workspace: shared-workspace
      runAfter:
        - cleanup-workspace
    - name: compress-model
      taskRef:
        name: compress-model
      params:
        - name: COMPRESS_MODEL
          value: $(params.COMPRESS_MODEL)
        - name: SKIP_TASK
          value: "compress-model"
        - name: SKIP_TASKS
          value: $(params.SKIP_TASKS)
      workspaces:
        - name: shared-workspace
          workspace: shared-workspace
      runAfter:
        - pull-model-from-huggingface
    - name: build-and-push-modelcar
      taskSpec:
        workspaces:
          - name: shared-workspace
          - name: quay-auth-workspace
        params:
          - name: OCI_REGISTRY_SOURCE
          - name: OCI_REGISTRY_DESTINATION
          - name: SKIP_TASK
          - name: SKIP_TASKS
        steps:
          - name: build-modelcar
            image: quay.io/fedora/fedora:latest
            script: |
              #!/bin/sh
              set -e
              if [[ ",$(params.SKIP_TASKS)," == *",$(params.SKIP_TASK),"* ]]; then
                echo "Skipping build-and-push-modelcar task"
                exit 0
              fi
              echo "Installing dependencies..."
              dnf install -y golang git make python3-pip skopeo
              pip3 install poetry
              echo "Checking if OLOT already exists..."
              if [ -d "/workspace/shared-workspace/olot" ]; then
                echo "Removing existing OLOT directory..."
                rm -rf /workspace/shared-workspace/olot
              fi
              echo "Cloning and Installing OLOT..."
              git clone https://github.com/containers/olot.git /workspace/shared-workspace/olot
              cd /workspace/shared-workspace/olot
              make
              make install
              export PATH=$PATH:/usr/local/bin
              echo "OLOT installed successfully!"
              IMAGE_DIR=download
              MODEL_DIR=/workspace/shared-workspace/model
              echo "Downloading OCI image from $(params.OCI_REGISTRY_SOURCE)..."
              rm -rf $IMAGE_DIR
              skopeo copy --multi-arch all --remove-signatures \
                docker://$(params.OCI_REGISTRY_SOURCE) \
                oci:${IMAGE_DIR}:latest
              echo "Finding and appending model files to OCI image..."
              find $MODEL_DIR -name "*" -print0 | while IFS= read -r -d '' file; do
                echo "Adding $file to OCI image..."
                poetry run olot $IMAGE_DIR "$file"
              done
              echo "Pushing updated OCI image to $(params.OCI_REGISTRY_DESTINATION)..."
              skopeo copy --multi-arch all \
                --authfile /workspace/quay-auth-workspace/.dockerconfigjson \
                oci:${IMAGE_DIR}:latest \
                docker://$(params.OCI_REGISTRY_DESTINATION)
      params:
        - name: OCI_REGISTRY_SOURCE
          value: "registry.access.redhat.com/ubi9-micro@sha256:414cfa255ea10eaef4528a26d5618eb67cf487b635ee20f8f14b9317bfd6a4be"
        - name: OCI_REGISTRY_DESTINATION
          value: $(params.OCI_IMAGE)
        - name: SKIP_TASK
          value: "build-and-push-modelcar"
        - name: SKIP_TASKS
          value: $(params.SKIP_TASKS)
      workspaces:
        - name: shared-workspace
          workspace: shared-workspace
        - name: quay-auth-workspace
          workspace: quay-auth-workspace
      runAfter:
        - compress-model
    - name: register-with-registry
      taskSpec:
        params:
          - name: MODEL_NAME
          - name: MODEL_VERSION
          - name: OCI_IMAGE
          - name: SKIP_TASK
          - name: SKIP_TASKS
          - name: MODEL_REGISTRY_URL
        steps:
          - name: register-model
            image: python:3.10-slim
            script: |
              #!/usr/bin/env python3
              import os
              import sys
              import subprocess
              import json

              if os.environ.get('SKIP_TASK') in os.environ.get('SKIP_TASKS', '').split(','):
                  print("Skipping register-with-registry task")
                  sys.exit(0)

              print("Installing model-registry package...")
              subprocess.check_call([sys.executable, "-m", "pip", "install", "model-registry==0.2.15"])

              from model_registry import ModelRegistry
              from model_registry.types import ModelArtifact, ModelVersion, RegisteredModel
              from model_registry.exceptions import StoreError

              # Get namespace from service account
              namespace_file_path = '/var/run/secrets/kubernetes.io/serviceaccount/namespace'
              with open(namespace_file_path, 'r') as namespace_file:
                  namespace = namespace_file.read().strip()
              
              # Get cluster domain from environment
              cluster_domain = os.environ.get('CLUSTER_DOMAIN', 'cluster.local')
              
              # Get server address from environment
              server_address = os.environ.get('MODEL_REGISTRY_URL')
              if not server_address:
                  print("Error: MODEL_REGISTRY_URL environment variable not set")
                  sys.exit(1)
              print(f"Server address: {server_address}")

              # Set token path in environment
              os.environ["KF_PIPELINES_SA_TOKEN_PATH"] = "/var/run/secrets/kubernetes.io/serviceaccount/token"
              print("Token path set in environment")

              # Initialize model registry client
              registry = ModelRegistry(
                  server_address=server_address,
                  port=443,
                  author="modelcar-pipeline",
                  is_secure=False
              )

              # Extract model name from Hugging Face model ID
              model_name = os.environ.get('MODEL_NAME')
              model_version = os.environ.get('MODEL_VERSION')
              oci_image = "oci://" + os.environ.get('OCI_IMAGE') + ":latest"

              try:
                  # Register model with metadata
                  registered_model = registry.register_model(
                      model_name,
                      oci_image,
                      version=model_version,
                      description=f"Model downloaded from Hugging Face and compressed using GPTQ",
                      model_format_name="safetensors",
                      model_format_version="1",
                      storage_key="modelcar-storage",
                      storage_path="/workspace/shared-workspace/model",
                      metadata={
                          "source": "huggingface",
                          "framework": "pytorch",
                          "compressed": True
                      }
                  )

                  print(f"Successfully registered model: {model_name} version {model_version}")
                  print(f"Model URI: {oci_image}")
                  print(f"Model details available at: https://rhods-dashboard-redhat-ods-applications.{cluster_domain}/modelRegistry/modelcar-pipeline-registry/registeredModels/1/versions/{registry.get_model_version(model_name, model_version).id}/details")

              except StoreError as e:
                  print(f"Model and version already exists:")
                  model_details = registry.get_model_version(model_name, model_version)
                  print(json.dumps(model_details, indent=2))
                  sys.exit(0)
              except Exception as e:
                  print(f"Error registering model: {str(e)}")
                  sys.exit(1)
            env:
              - name: MODEL_NAME
                value: $(params.MODEL_NAME)
              - name: MODEL_VERSION
                value: $(params.MODEL_VERSION)
              - name: OCI_IMAGE
                value: $(params.OCI_IMAGE)
              - name: SKIP_TASK
                value: $(params.SKIP_TASK)
              - name: SKIP_TASKS
                value: $(params.SKIP_TASKS)
              - name: MODEL_REGISTRY_URL
                value: $(params.MODEL_REGISTRY_URL)
              - name: CLUSTER_DOMAIN
                value: "cluster.local"
      params:
        - name: MODEL_NAME
          value: $(params.MODEL_NAME)
        - name: MODEL_VERSION
          value: $(params.MODEL_VERSION)
        - name: OCI_IMAGE
          value: $(params.OCI_IMAGE)
        - name: SKIP_TASK
          value: "register-with-registry"
        - name: SKIP_TASKS
          value: $(params.SKIP_TASKS)
        - name: MODEL_REGISTRY_URL
          value: $(params.MODEL_REGISTRY_URL)
      runAfter:
        - build-and-push-modelcar
