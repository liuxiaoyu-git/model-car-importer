apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: modelcar-pipeline
spec:
  params:
    - description: 'The Hugging Face model repository (e.g., ibm-granite/granite-3.2-2b-instruct)'
      name: HUGGINGFACE_MODEL
      type: string
    - description: 'The OCI image destination (e.g., quay.io/my-user/my-modelcar)'
      name: OCI_IMAGE
      type: string
    - description: 'Optional array of file patterns to allow default: "*.safetensors", "*.json", "*.txt"'
      name: HUGGINGFACE_ALLOW_PATTERNS
      type: string
    - description: Name of the model to register in the model registry
      name: MODEL_NAME
      type: string
    - default: 1.0.0
      description: Version of the model to register
      name: MODEL_VERSION
      type: string
  tasks:
    - name: cleanup-workspace
      taskSpec:
        steps:
          - image: 'registry.access.redhat.com/ubi8/ubi-minimal:latest'
            name: cleanup
            script: |
              #!/bin/sh
              set -e
              echo "Cleaning up workspace..."
              rm -rf /workspace/shared-workspace/*
              echo "Workspace cleanup complete!"
        workspaces:
          - name: shared-workspace
      workspaces:
        - name: shared-workspace
          workspace: shared-workspace
    - name: pull-model-from-huggingface
      params:
        - name: HUGGINGFACE_MODEL
          value: $(params.HUGGINGFACE_MODEL)
      runAfter:
        - cleanup-workspace
      taskSpec:
        params:
          - name: HUGGINGFACE_MODEL
            type: string
          - default: ''
            name: HUGGINGFACE_ALLOW_PATTERNS
            type: string
        steps:
          - env:
              - name: HUGGINGFACE_TOKEN
                valueFrom:
                  secretKeyRef:
                    key: HUGGINGFACE_TOKEN
                    name: huggingface-secret
                    optional: true
            image: 'quay.io/hayesphilip/huggingface-modelcar-builder:latest'
            name: download-model
            script: |
              #!/bin/sh
              set -e
              echo "Downloading model from Hugging Face..."
              mkdir -p /workspace/shared-workspace/model
              CMD="python download_model.py -m $(params.HUGGINGFACE_MODEL) -t /workspace/shared-workspace/model --token $HUGGINGFACE_TOKEN"
              if [ ! -z "$(params.HUGGINGFACE_ALLOW_PATTERNS)" ]; then
                CMD="$CMD --allow-patterns $(params.HUGGINGFACE_ALLOW_PATTERNS)"
              fi
              eval $CMD
              echo "Download complete!"
              if [ -d /workspace/shared-workspace/model/.cache ]; then
                echo "Removing cache"
                rm -r /workspace/shared-workspace/model/.cache
              fi
        workspaces:
          - name: shared-workspace
      workspaces:
        - name: shared-workspace
          workspace: shared-workspace
    - name: build-and-push-modelcar
      params:
        - name: OCI_REGISTRY_SOURCE
          value: 'registry.access.redhat.com/ubi9-micro@sha256:414cfa255ea10eaef4528a26d5618eb67cf487b635ee20f8f14b9317bfd6a4be'
        - name: OCI_REGISTRY_DESTINATION
          value: $(params.OCI_IMAGE)
        - name: MODEL_VERSION
          value: $(params.MODEL_VERSION)
      runAfter:
        - pull-model-from-huggingface
      taskSpec:
        params:
          - name: OCI_REGISTRY_SOURCE
            type: string
          - name: OCI_REGISTRY_DESTINATION
            type: string
          - name: MODEL_VERSION
            type: string
        steps:
          - image: 'quay.io/hayesphilip/modelcar-builder:latest'
            imagePullPolicy: Always
            name: build-modelcar
            script: |
              #!/bin/bash
              set -e
              echo "Checking if OLOT already exists..."
              if [ -d "/workspace/shared-workspace/olot" ]; then
                echo "Removing existing OLOT directory..."
                rm -rf /workspace/shared-workspace/olot
              fi
              echo "Cloning and Installing OLOT..."
              git clone https://github.com/containers/olot.git /workspace/shared-workspace/olot
              cd /workspace/shared-workspace/olot
              # Verify Poetry is available
              poetry --version
              make
              make install
              export PATH=$PATH:/usr/local/bin
              echo "OLOT installed successfully!"
              IMAGE_DIR=download
              MODEL_DIR=/workspace/shared-workspace/model
              echo "Downloading OCI image from $(params.OCI_REGISTRY_SOURCE)..."
              rm -rf $IMAGE_DIR
              skopeo copy --multi-arch all --remove-signatures \
                docker://$(params.OCI_REGISTRY_SOURCE) \
                oci:${IMAGE_DIR}:latest
              echo "Finding and appending model files to OCI image..."
              find $MODEL_DIR -name "*" -print0 | while IFS= read -r -d '' file; do
                echo "Adding $file to OCI image..."
                poetry run olot $IMAGE_DIR "$file"
              done
              echo "Pushing updated OCI image to $(params.OCI_REGISTRY_DESTINATION):$(params.MODEL_VERSION)..."
              skopeo copy --multi-arch all \
                --authfile /workspace/quay-auth-workspace/.dockerconfigjson \
                oci:${IMAGE_DIR}:latest \
                docker://$(params.OCI_REGISTRY_DESTINATION):$(params.MODEL_VERSION)
        workspaces:
          - name: shared-workspace
          - name: quay-auth-workspace
      workspaces:
        - name: shared-workspace
          workspace: shared-workspace
        - name: quay-auth-workspace
          workspace: quay-auth-workspace
  workspaces:
    - name: shared-workspace
    - name: quay-auth-workspace
